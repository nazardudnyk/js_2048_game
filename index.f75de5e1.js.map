{"mappings":"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","sources":["src/scripts/main.js"],"sourcesContent":["'use strict';\n\nconst DIR = {\n  Left: 'ArrowLeft',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Up: 'ArrowUp',\n};\n\nconst magicValue = 4;\n\nconst button = document.querySelector('button');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst field = document.querySelector('tbody');\nconst scoreField = document.querySelector('.game-score');\n\nlet state = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet newState;\nlet isWin = false;\nlet score = 0;\nconst fieldMatrix = [...field.children].map(row => [...row.children]);\n\nbutton.addEventListener('click', buttonHandler);\ndocument.addEventListener('keydown', move);\n\nfunction buttonHandler() {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    state = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    score = 0;\n    messageLose.classList.toggle('hidden', true);\n    messageWin.classList.toggle('hidden', true);\n  }\n\n  addTile();\n  addTile();\n  render();\n}\n\nfunction addTile() {\n  newState = state.slice();\n\n  let changed = false;\n\n  for (let i = 0; i < magicValue; i++) {\n    for (let j = 0; j < magicValue; j++) {\n      if (state[i][j] !== newState[i][j]) {\n        changed = true;\n        break;\n      }\n    }\n\n    if (changed) {\n      break;\n    }\n  }\n\n  if (!changed) {\n    const [y, x] = findEmptyCell();\n\n    state[y][x] = randomNumber();\n  }\n}\n\nfunction findEmptyCell() {\n  const emptyCells = [];\n\n  state.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      if (cell === 0) {\n        emptyCells.push([rowIndex, columnIndex]);\n      }\n    });\n  });\n\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n}\n\nfunction randomNumber() {\n  return Math.random() >= 0.9 ? 4 : 2;\n}\n\nfunction render() {\n  state.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      const elem = fieldMatrix[rowIndex][columnIndex];\n\n      elem.classList = 'field-cell';\n\n      if (cell === 0) {\n        elem.innerText = '';\n      } else {\n        elem.innerText = cell;\n        elem.classList.add(`field-cell--${cell}`);\n      }\n    });\n  });\n\n  scoreField.innerText = score;\n}\n\nfunction move(e) {\n  newState = state;\n\n  switch (e.key) {\n    case DIR.Left:\n      left();\n      break;\n\n    case DIR.Right:\n      right();\n      break;\n\n    case DIR.Down:\n      down();\n      break;\n\n    case DIR.Up:\n      up();\n      break;\n\n    default:\n      return;\n  }\n\n  for (let i = 0; i < magicValue; i++) {\n    for (let j = 0; j < magicValue; j++) {\n      if (newState[i][j] !== state[i][j]) {\n        state = newState;\n        addTile();\n        render();\n\n        if (isWin) {\n          messageWin.classList.remove('hidden');\n\n          return;\n        }\n\n        if (!isPosibleToMove()) {\n          messageLose.classList.remove('hidden');\n        }\n\n        return;\n      }\n    }\n  }\n}\n\nfunction left() {\n  if (!checkRows()) {\n    return;\n  }\n\n  newState = newState.map(row => {\n    const newRow = row.filter(cell => cell !== 0);\n\n    newRow.forEach((cell, index) => {\n      if (cell === newRow[index + 1]) {\n        newRow[index] *= 2;\n        newRow.splice(index + 1, 1);\n        score += newRow[index];\n\n        if (newRow[index] === 2048) {\n          isWin = true;\n        }\n      }\n    });\n\n    return newRow.concat(Array(4 - newRow.length).fill(0));\n  });\n}\n\nfunction reverseRows() {\n  newState.forEach(row => row.reverse());\n}\n\nfunction right() {\n  if (!checkRows()) {\n    return;\n  }\n\n  reverseRows();\n  left();\n  reverseRows();\n}\n\nfunction transposeState() {\n  newState = newState[0]\n    .map((_, colIndex) => newState.map(row => row[colIndex]));\n}\n\nfunction up() {\n  transposeState();\n  left();\n  transposeState();\n}\n\nfunction down() {\n  transposeState();\n  right();\n  transposeState();\n}\n\nfunction isPosibleToMove() {\n  if (checkRows()) {\n    return true;\n  }\n\n  transposeState();\n\n  return checkColumns();\n}\n\nfunction checkRows() {\n  for (let i = 0; i < magicValue; i++) {\n    if (newState[i].some(cell => cell === 0)\n      || newState[i].some((cell, j) => cell === newState[i][j + 1])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction checkColumns() {\n  for (let i = 0; i < magicValue; i++) {\n    if (newState[i].some((cell, j) => cell === newState[i][j + 1])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}